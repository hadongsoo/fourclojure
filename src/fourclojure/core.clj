(ns fourclojure.core)

;; 32 Duplicate a Sequence

;; (= (__ [1 2 3]) '(1 1 2 2 3 3))
;; (= (__ [:a :a :b :b]) '(:a :a :a :a :b :b :b :b))
;; (= (__ [[1 2] [3 4]]) '([1 2] [1 2] [3 4] [3 4]))
;; (= (__ [[1 2] [3 4]]) '([1 2] [1 2] [3 4] [3 4]))

(#(flatten (map (fn [& arg] (list arg arg)) %)) [[1 2] [3 4]])

;; 단순하게 생각해서, 맵으로 데이터를 2개로 다시 뿌려주는걸 생각했는데, 중첩구조를 계산하지 못했다.

(mapcat #(list % %) [[1 2] [3 4]])

;; 나은 답변. mapcat으로 반복될 구조의 함수로 map화 + concat 해서 mapcat 사용

(apply + [1 2 3 4 5])
(+ 1 2 3 4 5)

(reduce + [1 2 3 4 5])
(concat ["a" "b" 1] "a" [1] [:a :b] {:a 1 :b 2})

(+ (+ (+ (+ 1 2) 3) 4) 5)

(map inc [1 2 3 4 5])
